//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HostForGame.ServiceServerGame {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SPlayer", Namespace="http://schemas.datacontract.org/2004/07/ServiceModels")]
    [System.SerializableAttribute()]
    public partial class SPlayer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateLastActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateRegistrationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EveryDayMarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GoogleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long PlayerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.DateTime DateLastAction {
            get {
                return this.DateLastActionField;
            }
            set {
                if ((this.DateLastActionField.Equals(value) != true)) {
                    this.DateLastActionField = value;
                    this.RaisePropertyChanged("DateLastAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.DateTime DateRegistration {
            get {
                return this.DateRegistrationField;
            }
            set {
                if ((this.DateRegistrationField.Equals(value) != true)) {
                    this.DateRegistrationField = value;
                    this.RaisePropertyChanged("DateRegistration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string DeviceId {
            get {
                return this.DeviceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceIdField, value) != true)) {
                    this.DeviceIdField = value;
                    this.RaisePropertyChanged("DeviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int EveryDayMark {
            get {
                return this.EveryDayMarkField;
            }
            set {
                if ((this.EveryDayMarkField.Equals(value) != true)) {
                    this.EveryDayMarkField = value;
                    this.RaisePropertyChanged("EveryDayMark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string GoogleId {
            get {
                return this.GoogleIdField;
            }
            set {
                if ((object.ReferenceEquals(this.GoogleIdField, value) != true)) {
                    this.GoogleIdField = value;
                    this.RaisePropertyChanged("GoogleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Ip {
            get {
                return this.IpField;
            }
            set {
                if ((object.ReferenceEquals(this.IpField, value) != true)) {
                    this.IpField = value;
                    this.RaisePropertyChanged("Ip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PlayerId {
            get {
                return this.PlayerIdField;
            }
            set {
                if ((this.PlayerIdField.Equals(value) != true)) {
                    this.PlayerIdField = value;
                    this.RaisePropertyChanged("PlayerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceServerGame.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetConnect", ReplyAction="http://tempuri.org/IService1/GetConnectResponse")]
        bool GetConnect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetConnect", ReplyAction="http://tempuri.org/IService1/GetConnectResponse")]
        System.Threading.Tasks.Task<bool> GetConnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(string name, int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(string name, int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPlayer", ReplyAction="http://tempuri.org/IService1/AddPlayerResponse")]
        HostForGame.ServiceServerGame.SPlayer AddPlayer(HostForGame.ServiceServerGame.SPlayer newPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPlayer", ReplyAction="http://tempuri.org/IService1/AddPlayerResponse")]
        System.Threading.Tasks.Task<HostForGame.ServiceServerGame.SPlayer> AddPlayerAsync(HostForGame.ServiceServerGame.SPlayer newPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckPlayer", ReplyAction="http://tempuri.org/IService1/CheckPlayerResponse")]
        HostForGame.ServiceServerGame.SPlayer CheckPlayer(HostForGame.ServiceServerGame.SPlayer newPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckPlayer", ReplyAction="http://tempuri.org/IService1/CheckPlayerResponse")]
        System.Threading.Tasks.Task<HostForGame.ServiceServerGame.SPlayer> CheckPlayerAsync(HostForGame.ServiceServerGame.SPlayer newPlayer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : HostForGame.ServiceServerGame.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<HostForGame.ServiceServerGame.IService1>, HostForGame.ServiceServerGame.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool GetConnect() {
            return base.Channel.GetConnect();
        }
        
        public System.Threading.Tasks.Task<bool> GetConnectAsync() {
            return base.Channel.GetConnectAsync();
        }
        
        public string GetData(string name, int value) {
            return base.Channel.GetData(name, value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(string name, int value) {
            return base.Channel.GetDataAsync(name, value);
        }
        
        public HostForGame.ServiceServerGame.SPlayer AddPlayer(HostForGame.ServiceServerGame.SPlayer newPlayer) {
            return base.Channel.AddPlayer(newPlayer);
        }
        
        public System.Threading.Tasks.Task<HostForGame.ServiceServerGame.SPlayer> AddPlayerAsync(HostForGame.ServiceServerGame.SPlayer newPlayer) {
            return base.Channel.AddPlayerAsync(newPlayer);
        }
        
        public HostForGame.ServiceServerGame.SPlayer CheckPlayer(HostForGame.ServiceServerGame.SPlayer newPlayer) {
            return base.Channel.CheckPlayer(newPlayer);
        }
        
        public System.Threading.Tasks.Task<HostForGame.ServiceServerGame.SPlayer> CheckPlayerAsync(HostForGame.ServiceServerGame.SPlayer newPlayer) {
            return base.Channel.CheckPlayerAsync(newPlayer);
        }
    }
}
